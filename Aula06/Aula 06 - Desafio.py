class Stack:
    """Classe que implementa uma pilha (Stack) usando uma lista"""

    def __init__(self):
        """Inicializa a pilha vazia"""
        self.itens = []

    def is_empty(self):
        """Verifica se a pilha estÃ¡ vazia"""
        return self.itens == []

    def push(self, item):
        """Adiciona um elemento ao topo da pilha"""
        self.itens.append(item)

    def pop(self):
        """Remove e retorna o elemento do topo da pilha"""
        return self.itens.pop()

    def peek(self):
        """Retorna o elemento do topo da pilha sem removÃª-lo"""
        return self.itens[-1]

    def size(self):
        """Retorna o nÃºmero de elementos na pilha"""
        return len(self.itens)


def is_balanced(expression):
    """
    FunÃ§Ã£o que verifica se os parÃªnteses, colchetes e chaves em uma string estÃ£o balanceados e ordenados corretamente.

    :param expression: String contendo os caracteres a serem analisados.
    :return: True se estiver balanceado, False caso contrÃ¡rio.
    """
    stack = Stack()  # Criamos uma pilha para armazenar os sÃ­mbolos de abertura
    pairs = {')': '(', ']': '[', '}': '{'}  # Mapeamos os sÃ­mbolos de fechamento para os de abertura correspondentes

    for char in expression:
        if char in "({[":
            stack.push(char)  # Se for um caractere de abertura, empilhamos
        elif char in ")}]":
            if stack.is_empty() or stack.pop() != pairs[char]:
                return False  # Se a pilha estiver vazia ou houver um erro de correspondÃªncia, retorna False

    return stack.is_empty()  # Se a pilha estiver vazia no final, a expressÃ£o estÃ¡ balanceada


# ğŸš€ Entrada do usuÃ¡rio para testar qualquer sequÃªncia
expression = input("Digite a sequÃªncia para verificaÃ§Ã£o: ")  # O usuÃ¡rio digita uma string
result = is_balanced(expression)  # Chamamos a funÃ§Ã£o para verificar se estÃ¡ balanceado
print(f"A sequÃªncia '{expression}' estÃ¡ balanceada? {result}")  # Exibe o resultado
